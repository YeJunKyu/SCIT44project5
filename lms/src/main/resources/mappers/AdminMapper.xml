<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.scit.lms.dao.AdminDAO">

<!--    회원조회-->
    <select id="selectAll"
            resultType="Member">
    select memberid,
        membername,
        gender,
        address,
        phone,
        email,
        rolename,
        enabled
        from lms_member

    </select>

<!--    다중수정-->
    <update id="update" parameterType="Member">
        UPDATE lms_member
        SET
        <if test="rolename != null">
            rolename = #{rolename},
        </if>
        <if test="enabled != null">
            enabled = #{enabled}
        </if>
        WHERE
        memberid = #{memberid}
    </update>

<!--    학생관리 학생조회-->
    <select id="selectAllStudents" resultType="StudentsAll">
        SELECT
        m.memberid as "member.memberid",
        m.membername as "member.membername",
        TO_CHAR(m.birthday, 'YY/MM/DD') as "member.birthday",
        m.gender as "member.gender",
        m.address as "member.address",
        s.school as "student.school",
        s.major as "student.major",
        s.graduation as "student.graduation",
        s.curriculum as "student.curriculum",
        jp.jpclassname as "jpCategory.jpclassname",
        it.itclassname as "itCategory.itclassname"
        FROM
        lms_member m
        LEFT JOIN lms_student s ON m.memberid = s.memberid
        LEFT JOIN class_jp_category jp ON m.memberid = jp.memberid
        LEFT JOIN class_it_category it ON m.memberid = it.memberid
        LEFT JOIN student_info si ON m.memberid = si.memberid
        where m.rolename = 'ROLE_student'
    </select>

<!--    학생관리  기수별조회-->
    <select id="getStudentsByBatch" parameterType="String" resultType="StudentsAll">
        SELECT
        m.memberid as "member.memberid",
        m.membername as "member.membername",
        TO_CHAR(m.birthday, 'YY/MM/DD') as "member.birthday",
        m.gender as "member.gender",
        m.address as "member.address",
        s.school as "student.school",
        s.major as "student.major",
        s.graduation as "student.graduation",
        s.curriculum as "student.curriculum",
        jp.jpclassname as "jpCategory.jpclassname",
        it.itclassname as "itCategory.itclassname"
        FROM
        lms_member m
        LEFT JOIN lms_student s ON m.memberid = s.memberid
        LEFT JOIN class_jp_category jp ON m.memberid = jp.memberid
        LEFT JOIN class_it_category it ON m.memberid = it.memberid
        LEFT JOIN student_info si ON m.memberid = si.memberid
        where  s.curriculum = #{curriculum}
    </select>


<!--학생관리 : 과정등록폼-->
    <select id="selectOnlyStudent" resultType="StudentsAll">
        SELECT m.memberid AS "member.memberid",
        m.membername as "member.membername",
        s.curriculum as "student.curriculum"
        FROM lms_member m
        LEFT JOIN lms_student s ON m.memberid = s.memberid
        WHERE m.rolename = 'ROLE_student' AND s.curriculum IS NULL

    </select>



<!--    학생관리 : 과정 등록-->
    <insert id="insertCurriculum" parameterType="Student">
        INSERT ALL
        <foreach collection="list" item="s">
            INTO lms_student (memberid, curriculum) VALUES (#{s.memberid}, #{s.curriculum})
        </foreach>
        SELECT * FROM dual
    </insert>

<!--    학생관리: 분반등록 폼-->
    <select id="selectOnlyStudentClass" resultType="StudentsAll">
        SELECT m.memberid AS "member.memberid",
        m.membername as "member.membername",
        jp.jpclassname AS "jpCategory.jpclassname",
        it.itclassname AS "itCategory.itclassname"
        FROM lms_member m
        LEFT JOIN class_jp_category jp ON m.memberid = jp.memberid
        LEFT JOIN class_it_category it ON m.memberid = it.memberid
        WHERE m.rolename = 'ROLE_student' AND jp.jpclassname IS NULL AND it.itclassname IS NULL

    </select>

<!--    학생관리: 분반등록-->
    <insert id="insertClass" parameterType="StudentClasses">
        INSERT ALL
        <foreach collection="list" item="s">
            INTO class_jp_category (memberid, jpclassname, jpsubject)
            VALUES (#{s.memberid}, #{s.jpclassname}, #{s.jpsubject})

            INTO class_it_category (memberid, itclassname, itsubject)
            VALUES (#{s.memberid}, #{s.itclassname}, #{s.itsubject})
        </foreach>
        SELECT * FROM dual
    </insert>

<!--    학생관리 : 기타정보등록폼-->
    <select id="selectOnlyStudentInformation"  resultType="Member">
     select m.*
        from lms_member m
        LEFT JOIN student_info si ON m.memberid = si.memberid
        WHERE m.rolename = 'ROLE_student' AND (
        si.certi_jpname IS NULL AND
        si.certi_name IS NULL AND
        si.company IS NULL AND
        si.note IS NULL AND
        si.experience IS NULL AND
        si.scitgraduation IS NULL AND
        si.originalphoto IS NULL AND
        si.savedphoto IS NULL
        )
    </select>

<!--    학생관리 : 기타정보등록-->
    <insert id="insertInformation" parameterType="StudentInfo">
        INSERT ALL
        <foreach collection="list" item="info" separator=" ">
            INTO student_info (memberid, certi_jpname, certi_name,  scitgraduation)
            VALUES (#{info.memberid}, #{info.certi_jpname}, #{info.certi_name},  #{info.scitgraduation})
        </foreach>
        SELECT * FROM dual
    </insert>

<!--    학생개인정보조회-->
    <select id="ReadOneStudent" parameterType="String" resultType="StudentsAll">
        SELECT
        m.memberid as "member.memberid",
        m.membername as "member.membername",
        m.note as "member.note",
        TO_CHAR(m.birthday, 'YYYY-MM-DD') as "member.birthday",
        m.gender as "member.gender",
        m.address as "member.address",
        s.school as "student.school",
        s.major as "student.major",
        s.graduation as "student.graduation",
        s.curriculum as "student.curriculum",
        jp.jpclassname as "jpCategory.jpclassname",
        it.itclassname as "itCategory.itclassname",
        si.certi_jpname as "studentInfo.certi_jpname",
        si.certi_name as "studentInfo.certi_name",
        si.company as "studentInfo.company",
        si.note as "studentInfo.note",
        si.experience as "studentInfo.experience",
        si.scitgraduation as "studentInfo.scitgraduation",
        si.originalphoto as "studentInfo.originalphoto",
        si.savedphoto as "studentInfo.savedphoto"
        FROM
        lms_member m
        LEFT JOIN lms_student s ON m.memberid = s.memberid
        LEFT JOIN class_jp_category jp ON m.memberid = jp.memberid
        LEFT JOIN class_it_category it ON m.memberid = it.memberid
        LEFT JOIN student_info si ON m.memberid = si.memberid
        where m.rolename = 'ROLE_student' and m.memberid = #{memberid}
    </select>
<!--개인정보 과정조회-->
<select id="selectOneStudent" parameterType="String"
resultType="Student">
select * from lms_student
    where memberid = #{member.memberid}
</select>
    
<!--    개인정보 분반조회-->
    <select id="selectOnejpCategory" parameterType="String"
            resultType="JP_category">
        select * from class_jp_category
        where memberid = #{member.memberid}
    </select>
    <select id="selectOneitCategory" parameterType="String"
            resultType="IT_category">
        select * from class_it_category
        where memberid = #{member.memberid}
    </select>
    
<!--    개인정보 기타정보조회-->
    <select id="selectOneStudentInfo" parameterType="String"
            resultType="StudentInfo">
        select * from student_info
        where memberid = #{member.memberid}
    </select>

<!--    개인정보 수정 : 과정-->
<update id="updateCurriculum" parameterType="StudentsAll">
        update lms_student set school = #{student.school},
    major = #{student.major},
    graduation = #{student.graduation},
    curriculum = #{student.curriculum}
    where memberid = #{member.memberid}
</update>
<!--개인정보 수정 : 분반-->
    <update id="updateitClass" parameterType="StudentsAll">
        update class_it_category set itclassname = #{itCategory.itclassname}
        where memberid = #{member.memberid}
    </update>
    <update id="updatejpClass" parameterType="StudentsAll">
        update class_jp_category set jpclassname = #{jpCategory.jpclassname}
        where memberid = #{member.memberid}
    </update>
<!--    개인정보 수정 : 기타정보-->
    <update id="updateInformation" parameterType="StudentsAll">
        update student_info set certi_jpname = #{studentInfo.certi_jpname},
        certi_name = #{studentInfo.certi_name},
        note = #{studentInfo.note},
        company = #{studentInfo.company},
        experience = #{studentInfo.experience},
        scitgraduation = #{studentInfo.scitgraduation}
        where memberid = #{member.memberid}
    </update>

<!--    개인정보 등록 : 과정-->
<insert id="insertOneCurriculum" parameterType="StudentsAll">
    insert into lms_student(memberid,school, major, graduation, curriculum)
    values(#{member.memberid},
    #{student.school},
    #{student.major},
    #{student.graduation},
    #{student.curriculum})

</insert>
<!--    개인정보 등록 : 분반-->
    <insert id="insertOneitClass" parameterType="StudentsAll">
    insert into class_it_category(memberid,itclassname)
        values(#{member.memberid},#{itCategory.itclassname})
    </insert>
    <insert id="insertOnejpClass" parameterType="StudentsAll">
    insert into class_jp_category(memberid,jpclassname)
        values(#{member.memberid},#{jpCategory.jpclassname})
    </insert>
<!--    개인정보 등록 : 기타정보-->
    <insert id="insertOneInformation" parameterType="StudentsAll">
    insert into student_info(memberid,certi_jpname,certi_name,note,
        company,experience,scitgraduation)
        values(#{member.memberid},
          #{studentInfo.certi_jpname},
          #{studentInfo.certi_name},
          #{studentInfo.note},
          #{studentInfo.company},
         #{studentInfo.experience},
         #{studentInfo.scitgraduation})
    </insert>
    
<!--    시험비중등록폼 대분류 등록-->
<insert id="insertBigRatio" parameterType="PrimaryRatio">
    INSERT INTO primary_ratio_category(category_id, categoryname, ratio, divname)
    VALUES (primary_ratio_category_seq.NEXTVAL, #{categoryname}, #{ratio}, #{divname})

</insert>
<!--    대분류 등록이후 다음폼조회-->
    <select id="ReadBigRatio" parameterType="String" resultType="PrimaryRatio">
        select category_id,
        categoryname,
        divname FROM primary_ratio_category WHERE divname = '대분류'
    </select>

    <!--    시험비중등록폼 중분류 등록-->
    <insert id="InsertMiddleRatio" parameterType="PrimaryRatio">
        INSERT INTO primary_ratio_category(category_id, parent_id,categoryname, ratio, divname)
        VALUES (primary_ratio_category_seq.NEXTVAL, #{parent_id}, #{categoryname}, #{ratio}, #{divname})

    </insert>

<!--    시험비중등록폼 소분류-->
    <select id="ReadMiddleRatio" parameterType="String" resultType="PrimaryRatio">
        select category_id,
        categoryname,
        divname FROM primary_ratio_category WHERE divname = '중분류'
    </select>

<!--    시험조회:대분류-->
    <select id="ReadTestBigList" resultType="PrimaryRatio">
        select * from primary_ratio_category
        where divname = '대분류'
        order by category_id

    </select>

    <!--    시험조회:중분류-->
    <select id="ReadTestMiddleList" resultType="PrimaryRatio">
        select * from primary_ratio_category
        where divname = '중분류'
        order by category_id

    </select>

    <!--    시험조회:소분류-->
    <select id="ReadTestSmallList" resultType="PrimaryRatio">
        select * from primary_ratio_category
        where divname = '소분류'
        order by category_id

    </select>

<!--    시험종목비중수정-->
    <update id="updateTestList" parameterType="PrimaryRatio">
        update primary_ratio_category
        set categoryname = #{categoryname},
        ratio = #{ratio},
        divname = #{divname}
        where category_id = #{category_id}
    </update>

    <!-- 출결등록폼조회 -->
    <select id="selectAllAttendance" resultType="StudentsAll">
        SELECT
        m.memberid AS "member.memberid",
        m.membername AS "member.membername",
        m.gender AS "member.gender",
        m.rolename AS "member.rolename",
        m.enabled AS "member.enabled",
        MAX(a.att_type) AS "attendance.att_type",
        TO_CHAR(MAX(a.att_date), 'YYYY-MM-DD') AS "attendance.att_date"
        FROM lms_member m
        LEFT JOIN attendance a ON m.memberid = a.memberid
        where m.rolename = 'ROLE_student'
        GROUP BY
        m.memberid,
        m.membername,
        m.gender,
        m.rolename,
        m.enabled
    </select>

<!--    출결등록폼 날짜별조회-->
    <select id="selectAllAttendanceDate">
        SELECT
        m.memberid AS "member.memberid",
        m.membername AS "member.membername",
        m.gender AS "member.gender",
        m.rolename AS "member.rolename",
        m.enabled AS "member.enabled",
        a.att_type AS "attendance.att_type",
        TO_CHAR(a.att_date, 'YYYY-MM-DD') AS "attendance.att_date"
        FROM
        lms_member m
        LEFT JOIN
        attendance a ON m.memberid = a.memberid AND TO_CHAR(a.att_date, 'YYYY-MM-DD') = #{selectedDate}
        WHERE
        m.rolename = 'ROLE_student'
    </select>



<!--    출결등록 중복데이터조회-->
    <select id="findAttendanceByMemberIdAndDate" parameterType="hashmap"
            resultType="Attendance">
        select * from
        attendance where memberid = #{memberid} and att_date = #{att_date}
    </select>

<!--    출결등록다중인설트-->
    <insert id="InsertStudentAttendance" parameterType="Attendance">
        INSERT INTO attendance (attnum, memberid, att_date, att_type
        <if test="att_permission != null">, att_permission</if>
        )
        VALUES (attendance_seq.NEXTVAL, #{memberid}, #{att_date}, #{att_type}
        <if test="att_permission != null">, #{att_permission}</if>
        )
    </insert>

<!--    출결조회(수정)폼-->
    <select id="ReadStudentAttendance" resultType="StudentsAll">
        select
        m.memberid as "member.memberid",
        m.membername as "member.membername", <!-- 이 부분이 잘못되어 있었으므로 수정합니다. -->
        m.gender as "member.gender",
        m.rolename as "member.rolename",
        m.enabled as "member.enabled",
        a.att_type as "attendance.att_type", <!-- 필드명을 "att.att_type"에서 "attendance.att_type"으로 변경하였습니다. StudentsAll 클래스에 맞게 -->
        a.att_permission as "attendance.att_permission",
        a.att_comment as "attendance.att_comment",
        TO_CHAR(a.att_date, 'YYYY-MM-DD') as "attendance.att_date"
        from lms_member m
        left join attendance a on m.memberid = a.memberid

    </select>

<!--    개인출결조회-->
    <select id="ReadOneStudentAttendance" parameterType="String" resultType="StudentsAll">
        select
        m.memberid as "member.memberid",
        m.membername as "member.membername", <!-- 이 부분이 잘못되어 있었으므로 수정합니다. -->
        m.gender as "member.gender",
        m.rolename as "member.rolename",
        m.enabled as "member.enabled",
        a.att_type as "attendance.att_type", <!-- 필드명을 "att.att_type"에서 "attendance.att_type"으로 변경하였습니다. StudentsAll 클래스에 맞게 -->
        a.att_permission as "attendance.att_permission",
        a.att_comment as "attendance.att_comment",
        TO_CHAR(a.att_date, 'YYYY-MM-DD') as "attendance.att_date"
        from lms_member m
        left join attendance a on m.memberid = a.memberid
        where m.memberid = #{memberid}

    </select>

<!--    개인출결 달별조회-->
<select id="SelectMonthAttendance" parameterType="hashmap" resultType="StudentsAll">
    select
    m.memberid as "member.memberid",
    m.membername as "member.membername",
    m.gender as "member.gender",
    m.rolename as "member.rolename",
    m.enabled as "member.enabled",
    a.att_type as "attendance.att_type",
    a.att_permission as "attendance.att_permission",
    a.att_comment as "attendance.att_comment",
    TO_CHAR(a.att_date, 'YYYY-MM-DD') as "attendance.att_date"
    from lms_member m
    left join attendance a on m.memberid = a.memberid and TO_CHAR(a.att_date, 'YYYY-MM') = #{selectedDate}
    where m.memberid = #{memberid}
</select>

<!--    출결조회 날짜별조회-->
    <select id="SelectDateAttendance" parameterType="String" resultType="StudentsAll">
        select
        m.memberid as "member.memberid",
        m.membername as "member.membername", <!-- 이 부분이 잘못되어 있었으므로 수정합니다. -->
        m.gender as "member.gender",
        m.rolename as "member.rolename",
        m.enabled as "member.enabled",
        a.att_type as "attendance.att_type", <!-- 필드명을 "att.att_type"에서 "attendance.att_type"으로 변경하였습니다. StudentsAll 클래스에 맞게 -->
        a.att_permission as "attendance.att_permission",
        a.att_comment as "attendance.att_comment",
        TO_CHAR(a.att_date, 'YYYY-MM-DD') as "attendance.att_date"
        from lms_member m
        left join attendance a on m.memberid = a.memberid
        where TO_CHAR(a.att_date, 'YYYY-MM-DD') = #{selectedDate}
    </select>



<!--    출결수정-->
    <update id="UpdateStudentAttendance" parameterType="Attendance">
        update attendance
        set att_date = #{att_date},
        att_type = #{att_type}
        <if test="att_permission != null">, att_permission = #{att_permission}</if>
        where memberid = #{memberid}
    </update>

<!--    단체성적조회-->


</mapper>
