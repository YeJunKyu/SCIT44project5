<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.scit.lms.dao.TestDAO">
    <!--시험 목록 조회-->
    <select id="testListAll" resultType="Test">
        select
            testid
            , testname
            , to_char(testdate, 'YYYY-MM-DD HH24:MI') as testdate
            , to_char(testlimit, 'YYYY-MM-DD HH24:MI') as testlimit
            , totalpoints
        from lms_test
        ORDER BY testid desc
    </select>

    <insert id="insertTest" parameterType="Test">
        <selectKey keyProperty="testid" resultType="int" order="AFTER">
            SELECT lms_test_seq.CURRVAL FROM DUAL
        </selectKey>
        insert into lms_test (
            testid, testname,categoryid, testdate, testlimit, totalpoints
        ) values (
            lms_test_seq.nextval
            , #{testname}
            , #{categoryid}
            , to_date(#{testdate}, 'YYYY-MM-DD HH24:MI')
            , to_date(#{testlimit}, 'YYYY-MM-DD HH24:MI')
            , #{totalpoints}
        )
    </insert>

<!--    비중조회-->
<select id="selectCategory" resultType="PrimaryRatio">
    select * from
    primary_ratio_category
    where divname = '대분류'
</select>

<!--    대분류선택후 중분류생성-->
    <select id="secondaryCategory" parameterType="int" resultType="PrimaryRatio">
        select * from
        primary_ratio_category
        where parent_id = #{primaryId}
    </select>

    <!--시험 정보 조회-->
    <select id="selectTest" parameterType="int" resultType="Test">
        SELECT
            testid
            , testname
            , totalpoints
            , to_char(testdate, 'YYYY-MM-DD HH24:MI') as testdate
            , to_char(testlimit, 'YYYY-MM-DD HH24:MI') as testlimit
            , totalpoints
        FROM lms_test
        WHERE testid = #{testid}
    </select>

<!--    시험삭제-->
    <delete id="deleteTest" parameterType="int">
        delete from lms_test
        where testid = #{testid}
    </delete>

<!--    시험수정-->
    <update id="updateTest" parameterType="Test">
        update lms_test
        set testname = #{testname},
        testdate = to_date(#{testdate}, 'YYYY-MM-DD HH24:MI'),
        testlimit = to_date(#{testlimit}, 'YYYY-MM-DD HH24:MI'),
        totalpoints = #{totalpoints}
        where testid = #{testid}
    </update>

<!--    시험수정 : 카테고리수정-->
<update id="updateCategory" parameterType="PrimaryRatio">
    update primary_ratio_category
    set categoryname = #{categoryname}
    where category_id = #{category_id}
</update>
<!--답안지 등록-->
    <insert id="submitTest" parameterType="TestpaperList">
        <selectKey keyProperty="asnum" resultType="int" order="AFTER">
            SELECT lms_testpaper_list_seq.CURRVAL FROM DUAL
        </selectKey>
        INSERT INTO lms_testpaper_list (
            asnum
            , testid
            , memberid
        ) VALUES (
            lms_testpaper_list_seq.nextval
            , #{testid}
            , #{memberid}
        )
    </insert>

<!--    답안지 중복등록 방지용 조회쿼리-->
<select id="checkDuplicateSubmission" parameterType="TestpaperList"
        resultType="TestpaperList">
    SELECT * FROM lms_testpaper_list WHERE memberid = #{memberid} AND testid = #{testid}
</select>

    <!--시험 하나의 제출된 답변들 목록으로 이동-->
    <select id="testList" parameterType="int" resultType="TestpaperList">
        SELECT
            asnum
            , testid
            , memberid
            , totalscore
            , (SELECT membername FROM lms_member m WHERE t.memberid = m.memberid) membername
            , checked
        FROM lms_testpaper_list t
        WHERE
            testid = #{testid}
    </select>

<!--    학생용 제출시험조회-->
<select id="submitTestList" resultType="AllOfTest">
    SELECT
    tl.memberid as "testpaperList.memberid",
    tl.testid as "testpaperList.testid",
    tl.asnum AS "testpaperList.asnum",
    tl.totalscore AS "testpaperList.totalscore",
    tl.checked AS "testpaperList.checked",
    t.testname AS "test.testname",
    t.testdate as "test.testdate",
    t.testlimit as "test.testlimit"
    FROM
    lms_testpaper_list tl
    JOIN
    lms_test t ON tl.testid = t.testid
    WHERE
    tl.memberid = #{memberid}

</select>

    <!--testid 가져오기-->
    <select id="getTestid" parameterType="int" resultType="int">
        SELECT
            testid
        FROM lms_testpaper_list
        WHERE
            asnum = #{asnum}
    </select>

    <!--제출된 답변 총점 계산-->
    <update id="updateTotalpoints" parameterType="int">
        UPDATE
            lms_testpaper_list
        SET
            totalscore = (
            SELECT
                SUM(points)
            FROM
                lms_test_answer
            WHERE
                asnum = #{asnum}
            )
        WHERE
            asnum = #{asnum}
    </update>

    <!--선택한 답변 정보 가져오기-->
    <select id="getTestpaperList" resultType="TestpaperList">
        SELECT *
        FROM lms_testpaper_list
        WHERE
            asnum =#{asnum}
    </select>

    <!--제출된 응답 확인 상태 변경-->
    <update id="completeCheck" parameterType="int">
        UPDATE lms_testpaper_list
        SET
            checked = 'complete'
        WHERE
            asnum = #{asnum}
    </update>

    <!--정답지 번호 가져오기-->
    <select id="getAsnum" parameterType="String">
        SELECT asnum
        FROM lms_test_answer
        WHERE
            answernum = #{answernum}
    </select>



    <!--학생이 본인 성적 확인-->
    <select id="selectTestByStudent" parameterType="String" resultType="Test">
        SELECT
            testname,
            totalpoints,
            testdate,
            (SELECT totalscore FROM lms_testpaper_list l WHERE l.testid = t.testid and l.memberid = #{memberid} AND l.checked = 'complete') totalscore
        FROM lms_test t
        WHERE
        t.testid IN (SELECT testid FROM lms_testpaper_list l WHERE l.memberid = #{memberid} AND l.checked = 'complete')

    </select>

    <!--카테고리별 시험 확인-->
    <select id="getTestpaperListByCategoryId" parameterType="hashmap" resultType="TestpaperList">
        select *
        from lms_testpaper_list t
        where
            t.memberid = #{memberid}
          and testid in (
            select testid
            from lms_test
            where categoryid in (
                select category_id
                FROM primary_ratio_category
                WHERE parent_id IN (
                    SELECT category_id
                    FROM primary_ratio_category
                    WHERE parent_id = #{category_id}
                )
            )
        )
    </select>
</mapper>
