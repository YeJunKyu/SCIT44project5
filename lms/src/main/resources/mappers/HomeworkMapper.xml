<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.scit.lms.dao.HomeworkDAO">

    <!-- 과제 등록 -->
    <insert id="insertHw" parameterType="Homework">
        insert into lms_homework
        (
        hw_num
        , hw_title
        , hw_contents
        , hw_curriculum
        , hw_subject
        , hw_class
        , hw_start
        , hw_end
        , memberid
        <if test="originalfile != null and savedfile != null">
            , originalfile
            , savedfile
        </if>
        )
        values
        (
        lms_hw_seq.nextval
        , #{hw_title}
        , #{hw_contents}
        , #{hw_curriculum}
        , #{hw_subject}
        , #{hw_class}
        , TO_DATE(#{hw_start}, 'YYYY-MM-DD HH24:MI:SS')
        , TO_DATE(#{hw_end}, 'YYYY-MM-DD HH24:MI:SS')
        , #{memberid}
        <if test="originalfile != null and savedfile != null">
            , #{originalfile}
            , #{savedfile}
        </if>
        )
    </insert>

    <!--학생 이름, 커리큘럼, 일본어 반, IT반 전부 불러오기-->
    <select id="homeworkCategory" resultType="HomeworkCategory">
        select
            s.memberid as "memberid",
            s.curriculum as "curriculum",
            jp.jpclassname as "jpclassname",
            it.itclassname as "itclassname"
        from
            lms_student s
        join class_jp_category jp on s.memberid = jp.memberid
        join class_it_category it on s.memberid = it.memberid
        order by
            to_number(regexp_substr(s.curriculum, '\d+'))
    </select>

    <!-- 특정 학생 이름, 커리큘럼, 일본어 반, IT반 불러오기 -->
    <select id="studentCategory" resultType="HomeworkCategory">
        select
            s.memberid as "memberid",
            s.curriculum as "curriculum",
            jp.jpclassname as "jpclassname",
            jp.jpsubject as "jpsubject",
            it.itclassname as "itclassname",
            it.itsubject as "itsubject"
        from
            lms_student s
        join class_jp_category jp on s.memberid = jp.memberid
        join class_it_category it on s.memberid = it.memberid
        where
            s.memberid=#{memberid}
    </select>

    <!-- 과제 리스트 -->
    <select id="hwList" parameterType="hashmap" resultType="Homework">
        select
            *
        from
            lms_homework
        <where>
            <if test="type == 'subject'">
                and upper(hw_subject) like upper('%' || #{searchWord} || '%')
            </if>
            <if test="type == 'memberid'">
                and memberid = #{searchWord}
            </if>
            <if test="type == 'title'">
                and upper(hw_title) like upper('%' || #{searchWord} || '%')
            </if>
            <if test="type == 'contents'">
                and upper(hw_contents) like upper('%' || #{searchWord} || '%')
            </if>
            <if test="type == 'all'">
                and
                upper(hw_subject) like upper('%' || #{searchWord} || '%')
                or
                upper(memberid) like upper('%' || #{searchWord} || '%')
                or
                upper(hw_title) like upper('%' || #{searchWord} || '%')
                or
                upper(hw_contents) like upper('%' || #{searchWord} || '%')
            </if>
        </where>
        order by
            hw_num desc
    </select>

    <!-- 학생 과제 리스트(해당하는 커리큘럼, 반만 조회) -->
    <select id="studentHwList" parameterType="hashmap" resultType="Homework">
        select
            *
        from
            lms_homework
        <where>
            <if test="type == 'subject'">
                and upper(hw_subject) like upper('%' || #{searchWord} || '%')
            </if>
            <if test="type == 'memberid'">
                and memberid = #{searchWord}
            </if>
            <if test="type == 'title'">
                and upper(hw_title) like upper('%' || #{searchWord} || '%')
            </if>
            <if test="type == 'contents'">
                and upper(hw_contents) like upper('%' || #{searchWord} || '%')
            </if>
            <if test="type == 'all'">
                and
                upper(hw_subject) like upper('%' || #{searchWord} || '%')
                or
                upper(memberid) like upper('%' || #{searchWord} || '%')
                or
                upper(hw_title) like upper('%' || #{searchWord} || '%')
                or
                upper(hw_contents) like upper('%' || #{searchWord} || '%')
            </if>
            and
            (
                    hw_curriculum=#{curriculum}
                and (hw_subject='일본어' and hw_class=#{jpclassname})
                or (hw_subject='IT' and hw_class=#{itclassname})
                or hw_subject='해당없음'
            )
        </where>
        order by
            hw_num desc
    </select>

    <!-- 카테고리 선택 과제 리스트 -->
    <select id="fetchList" resultType="Homework">
        select * from lms_homework
        <where>
            hw_curriculum = #{curriculum}
            <if test="subject != '해당없음'">
                and hw_subject = #{subject}
            </if>
            <if test="classname != '해당없음'">
                and hw_class = #{classname}
            </if>
        </where>
        order by
            hw_num desc
    </select>

    <!-- 전체 글 개수 -->
    <select id="getTotal" parameterType="hashmap" resultType="int">
        select
            count(*)
        from
            lms_homework
        <where>
            <if test="type == 'subject'">
                and upper(hw_subject) like upper('%' || #{searchWord} || '%')
            </if>
            <if test="type == 'memberid'">
                and memberid = #{searchWord}
            </if>
            <if test="type == 'title'">
                and upper(hw_title) like upper('%' || #{searchWord} || '%')
            </if>
            <if test="type == 'contents'">
                and upper(hw_contents) like upper('%' || #{searchWord} || '%')
            </if>
            <if test="type == 'all'">
                and
                upper(hw_subject) like upper('%' || #{searchWord} || '%')
                or
                upper(memberid) like upper('%' || #{searchWord} || '%')
                or
                upper(hw_title) like upper('%' || #{searchWord} || '%')
                or
                upper(hw_contents) like upper('%' || #{searchWord} || '%')
            </if>
        </where>
    </select>

    <!-- 전체 글 개수(학생) -->
    <select id="getStudentTotal" parameterType="hashmap" resultType="int">
        select
            count(*)
        from
            lms_homework
        <where>
                hw_curriculum=#{curriculum}
                and (hw_subject='일본어' and hw_class=#{jpclassname})
                or (hw_subject='IT' and hw_class=#{itclassname})
                or hw_subject='해당없음'
            <if test="type == 'subject'">
                and upper(hw_subject) like upper('%' || #{searchWord} || '%')
            </if>
            <if test="type == 'memberid'">
                and memberid = #{searchWord}
            </if>
            <if test="type == 'title'">
                and upper(hw_title) like upper('%' || #{searchWord} || '%')
            </if>
            <if test="type == 'contents'">
                and upper(hw_contents) like upper('%' || #{searchWord} || '%')
            </if>
            <if test="type == 'all'">
                and
                upper(hw_subject) like upper('%' || #{searchWord} || '%')
                or
                upper(memberid) like upper('%' || #{searchWord} || '%')
                or
                upper(hw_title) like upper('%' || #{searchWord} || '%')
                or
                upper(hw_contents) like upper('%' || #{searchWord} || '%')
            </if>
        </where>
    </select>

    <!-- 과제 조회 -->
    <select id="selectHw" resultType="Homework">
        select
            *
        from
            lms_homework
        where
            hw_num=#{hw_num}
    </select>

    <!-- 과제 수정 -->
    <update id="updateHw" parameterType="Homework">
        update lms_homework
        set
            hw_title=#{hw_title}
            , hw_contents=#{hw_contents}
            , hw_curriculum=#{hw_curriculum}
            , hw_subject=#{hw_subject}
            , hw_class=#{hw_class}
            , hw_inputdate=sysdate
            , hw_start=TO_DATE(#{hw_start}, 'YYYY-MM-DD HH24:MI:SS')
            , hw_end=TO_DATE(#{hw_end}, 'YYYY-MM-DD HH24:MI:SS')
        <if test="originalfile != null and savedfile != null">
            , originalfile=#{originalfile}
            , savedfile=#{savedfile}
        </if>
        where hw_num=#{hw_num} and memberid=#{memberid}
    </update>

    <!-- 과제 삭제 -->
    <delete id="deleteHw" parameterType="Homework">
        delete from lms_homework where hw_num=#{hw_num} and memberid=#{memberid}
    </delete>

    <!-- 과제 등록 -->
    <insert id="insertSub" parameterType="HomeworkSub">
        insert into lms_homework_submission
        (
            hw_sub_num
            , hw_num
            , hw_sub_contents
            , hw_sub_done
            , memberid
        <if test="originalfile != null and savedfile != null">
            , originalfile
            , savedfile
        </if>
        )
        values
        (
            lms_hw_sub_seq.nextval
            , #{hw_num}
            , #{hw_sub_contents}
            , #{hw_sub_done}
            , #{memberid}
        <if test="originalfile != null and savedfile != null">
            , #{originalfile}
            , #{savedfile}
        </if>
        )
    </insert>

    <!-- 과제 제출 리스트 -->
    <select id="subList" parameterType="HomeworkSub">
        select
            *
        from
            lms_homework_submission
        where
            hw_num=#{hw_num}
        order by
            hw_sub_num desc
    </select>

    <!-- 제출 카운트 -->
    <select id="subCount">
        select count(*) from lms_homework_submission where memberid=#{memberid} and hw_num=#{hw_num}
    </select>

    <!-- 제출 조회 -->
    <select id="selectSub" resultType="HomeworkSub">
        select
            *
        from
            lms_homework_submission
        where
            hw_sub_num=#{hw_sub_num}
    </select>

    <!-- 제출 수정 -->
    <update id="updateSub">
        update lms_homework_submission
        set
            hw_sub_contents=#{hw_sub_contents}
            , hw_sub_done=#{hw_sub_done}
            , hw_sub_inputdate=sysdate
        <if test="originalfile != null and savedfile != null">
            , originalfile=#{originalfile}
            , savedfile=#{savedfile}
        </if>
        where hw_sub_num=#{hw_sub_num} and memberid=#{memberid}
    </update>

    <!-- 과제 학생 리스트 -->
    <select id="stList" resultType="HomeworkStudent">
        select
            s.memberid,
            s.school,
            s.major,
            s.graduation,
            s.curriculum,
            jp.jpclassname,
            jp.jpsubject,
            it.itclassname,
            it.itsubject,
            h.hw_num,
            h.hw_sub_num,
            h.hw_sub_contents,
            h.hw_sub_inputdate,
            h.hw_sub_done,
            h.hw_sub_comment,
            h.hw_sub_score,
            h.originalfile,
            h.savedfile
        from
            lms_student s
        left join
            class_jp_category jp on s.memberid = jp.memberid
        left join
            class_it_category it on s.memberid = it.memberid
        left outer join
            lms_homework_submission h on s.memberid = h.memberid and h.hw_num = #{hw_num}
        order by
            s.memberid
    </select>

    <!-- 점수 등록 -->
    <update id="updateScore" parameterType="HomeworkSub">
        update lms_homework_submission
        set
            hw_sub_score=#{hw_sub_score}
        <if test="hw_sub_comment != null">
            , hw_sub_comment=#{hw_sub_comment}
        </if>
        where hw_sub_num=#{hw_sub_num}
    </update>


</mapper>
